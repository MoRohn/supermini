name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag or input
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog for this version
        echo "## Changes in $VERSION" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          echo "### Commits since $LAST_TAG:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
        else
          echo "### Initial Release" >> release_notes.md
          echo "- First open-source release of SuperMini" >> release_notes.md
          echo "- Desktop AI assistant with Claude API and Ollama support" >> release_notes.md
          echo "- Five task types: Code, Multimedia, RAG, Automation, Analytics" >> release_notes.md
          echo "- Autonomous enhancement capabilities" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the appropriate package for your platform" >> release_notes.md
        echo "2. Extract the files" >> release_notes.md
        echo "3. Install dependencies: \`pip install -r requirements.txt\`" >> release_notes.md
        echo "4. Run: \`python3 supermini.py\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "See [README.md](README.md) for detailed installation instructions." >> release_notes.md
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_notes.outputs.VERSION }}
        release_name: SuperMini ${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

  build-and-upload:
    name: Build and Upload Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            asset_name: supermini-linux
          - os: macos-latest
            platform: macos
            asset_name: supermini-macos
          - os: windows-latest
            platform: windows
            asset_name: supermini-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create distribution package
      run: |
        # Create platform-specific package
        mkdir -p dist/${{ matrix.asset_name }}
        
        # Copy main application files
        cp *.py dist/${{ matrix.asset_name }}/
        cp -r assets dist/${{ matrix.asset_name }}/
        cp -r prompts dist/${{ matrix.asset_name }}/
        cp requirements.txt dist/${{ matrix.asset_name }}/
        cp README.md dist/${{ matrix.asset_name }}/
        cp LICENSE dist/${{ matrix.asset_name }}/
        cp CHANGELOG.md dist/${{ matrix.asset_name }}/
        
        # Copy platform-specific scripts
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          cp scripts/launch_linux.sh dist/${{ matrix.asset_name }}/launch.sh
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          cp scripts/launch.sh dist/${{ matrix.asset_name }}/launch.sh
        elif [[ "${{ matrix.platform }}" == "windows" ]]; then
          cp scripts/launch_windows.bat dist/${{ matrix.asset_name }}/launch.bat
        fi
        
        # Create installation script
        cat > dist/${{ matrix.asset_name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing SuperMini dependencies..."
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements.txt
        echo "Installation complete!"
        echo "Run 'python3 supermini.py' to start SuperMini"
        EOF
        
        chmod +x dist/${{ matrix.asset_name }}/install.sh
        
        # Create archive
        cd dist
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}/
        else
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}/
        fi
    
    - name: Upload Release Asset (Linux/macOS)
      if: matrix.platform != 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

  update-changelog:
    name: Update Changelog
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Update CHANGELOG.md
      run: |
        # Get version
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        # Create new changelog entry
        DATE=$(date +%Y-%m-%d)
        
        # Backup current changelog
        cp CHANGELOG.md CHANGELOG.md.bak
        
        # Create new changelog with release entry
        {
          # Keep header
          head -n 7 CHANGELOG.md.bak
          
          # Add new release entry
          echo "## [$VERSION] - $DATE"
          echo ""
          
          # Get commits since last tag for automatic changelog
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            echo "### Added"
            git log --pretty=format:"- %s" --grep="feat:" $LAST_TAG..HEAD | head -10
            echo ""
            echo "### Fixed"
            git log --pretty=format:"- %s" --grep="fix:" $LAST_TAG..HEAD | head -10
            echo ""
            echo "### Changed"
            git log --pretty=format:"- %s" --grep="refactor:\|style:\|perf:" $LAST_TAG..HEAD | head -10
            echo ""
          fi
          
          # Add rest of changelog
          tail -n +8 CHANGELOG.md.bak
        } > CHANGELOG.md
        
        # Clean up empty sections
        sed -i '/^### [A-Za-z]*$/d' CHANGELOG.md || true
        
        rm CHANGELOG.md.bak
    
    - name: Commit changelog update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for release $VERSION" || exit 0
        git push

  notify:
    name: Notify Release
    needs: [create-release, build-and-upload, update-changelog]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success' && needs.build-and-upload.result == 'success'
      run: |
        echo "‚úÖ Release created successfully!"
        echo "üîó Release URL: ${{ github.server_url }}/${{ github.repository }}/releases"
    
    - name: Notify failure
      if: needs.create-release.result == 'failure' || needs.build-and-upload.result == 'failure'
      run: |
        echo "‚ùå Release creation failed!"
        echo "Check the workflow logs for details."
        exit 1